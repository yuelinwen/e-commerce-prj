{"ast":null,"code":"var _jsxFileName = \"/Users/yuelinwen/Desktop/e-commerce-prj/my-app/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selector\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport CollectionPageContainer from \"../collection/collection.container\"; //const CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c = CollectionPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  // componentDidMount() {\n  //   const { updateCollections } = this.props;\n  //   const collectionRef = firestore.collection(\"NewCollections\");\n  //   // fetch(\n  //   //   \"https://firestore.googleapis.com/v1/projects/e-commerce-prj-57a14/databases/(default)/documents/collections\"\n  //   // )\n  //   //   .then((response) => response.json())\n  //   //   .then((collections) => console.log(collections));\n  //   collectionRef.get().then((snapshot) => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     updateCollections(collectionsMap);\n  //     this.setState({ loading: false });\n  //   });\n  // }\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    // const { match, isFetchingCollections,isCollectionsLoaded } = this.props;\n    const {\n      match,\n      isCollectionsLoaded\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`,\n        component: CollectionsOverviewContainer // render={(props) => (\n        //   <CollectionOverviewWithSpinner\n        //     isLoading={isCollectionsLoaded}\n        //     {...props}\n        //   />\n        // )}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n          isLoading: !isCollectionsLoaded,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this),\n        component: CollectionPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  //isFetchingCollections: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["/Users/yuelinwen/Desktop/e-commerce-prj/my-app/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","CollectionsOverview","CollectionPage","fetchCollectionsStartAsync","selectIsCollectionFetching","selectIsCollectionsLoaded","WithSpinner","CollectionsOverviewContainer","CollectionPageContainer","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionsLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SACEC,0BADF,EAEEC,yBAFF,QAGO,gCAHP;AAKA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC,C,CAEA;;;AACA,MAAMC,yBAAyB,GAAGH,WAAW,CAACJ,cAAD,CAA7C;KAAMO,yB;;AAEN,MAAMC,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAuC;AACrC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAET,MAAAA;AAAF,QAAiC,KAAKU,KAA5C;AACAV,IAAAA,0BAA0B;AAC3B;;AAEDW,EAAAA,MAAM,GAAG;AACR;AACC,UAAM;AAAEC,MAAAA,KAAF;AAAQC,MAAAA;AAAR,QAAgC,KAAKH,KAA3C;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,EAFtB;AAGE,QAAA,SAAS,EAAEV,4BAHb,CAIE;AACA;AACA;AACA;AACA;AACA;;AATF;AAAA;AAAA;AAAA;AAAA,cADF,eAYE,QAAC,KAAD;AACE,QAAA,IAAI,EAAG,GAAEQ,KAAK,CAACE,IAAK,gBADtB;AAEE,QAAA,MAAM,EAAGJ,KAAD,iBACN,QAAC,yBAAD;AACE,UAAA,SAAS,EAAE,CAACG,mBADd;AAAA,aAEMH;AAFN;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAQE,QAAA,SAAS,EAAEX;AARb;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAyBD;;AApDoC;;AAuDvC,MAAMgB,eAAe,GAAGlB,wBAAwB,CAAC;AAC/C;AACAgB,EAAAA,mBAAmB,EAAEX;AAF0B,CAAD,CAAhD;;AAKA,MAAMc,kBAAkB,GAAIC,QAAD,KAAe;AACxCjB,EAAAA,0BAA0B,EAAE,MAAMiB,QAAQ,CAACjB,0BAA0B,EAA3B;AADF,CAAf,CAA3B;;AAIA,eAAeJ,OAAO,CAACmB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,QAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\n\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport {\n  selectIsCollectionFetching,\n  selectIsCollectionsLoaded,\n} from \"../../redux/shop/shop.selector\";\n\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport CollectionPageContainer from \"../collection/collection.container\";\n\n//const CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // componentDidMount() {\n  //   const { updateCollections } = this.props;\n  //   const collectionRef = firestore.collection(\"NewCollections\");\n\n  //   // fetch(\n  //   //   \"https://firestore.googleapis.com/v1/projects/e-commerce-prj-57a14/databases/(default)/documents/collections\"\n  //   // )\n  //   //   .then((response) => response.json())\n  //   //   .then((collections) => console.log(collections));\n\n  //   collectionRef.get().then((snapshot) => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     updateCollections(collectionsMap);\n  //     this.setState({ loading: false });\n  //   });\n  // }\n\n  componentDidMount() {\n    const { fetchCollectionsStartAsync } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n   // const { match, isFetchingCollections,isCollectionsLoaded } = this.props;\n    const { match,isCollectionsLoaded } = this.props;\n\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          component={CollectionsOverviewContainer}\n          // render={(props) => (\n          //   <CollectionOverviewWithSpinner\n          //     isLoading={isCollectionsLoaded}\n          //     {...props}\n          //   />\n          // )}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          render={(props) => (\n            <CollectionPageWithSpinner\n              isLoading={!isCollectionsLoaded}\n              {...props}\n            />\n          )}\n          component={CollectionPage}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  //isFetchingCollections: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}