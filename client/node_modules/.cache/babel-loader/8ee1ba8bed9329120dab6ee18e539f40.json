{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.type';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"NewCollections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); //call is a blocking effect creator. This means that the saga will not continue to run to the next yield until the API call finishes. \n    //Once it’s finished, we yield put. put is dispatching a new action with the result from the previous yield. \n\n    yield put(fetchCollectionsSuccess(collectionsMap)); //put is a non-blocking effect creator, so it dispatches an action (could be an action that triggers some other saga)\n  } catch (err) {\n    yield put(fetchCollectionsFailure(err.message));\n  } // collectionRef.get().then((snapshot) => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap))\n  // }).catch(err => dispatch(fetchCollectionsFailure(err.message)));\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/yuelinwen/Desktop/e-commerce-prj/my-app/src/redux/shop/shop.saga.js"],"names":["takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","err","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,MAAI;AACA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,gBAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,+BAAD,EAAkCO,QAAlC,CAAjC,CAHA,CAIA;AACA;;AAEA,UAAMT,GAAG,CAACG,uBAAuB,CAACQ,cAAD,CAAxB,CAAT,CAPA,CAQA;AACH,GATD,CAUA,OAAOC,GAAP,EAAY;AACR,UAAMZ,GAAG,CAACI,uBAAuB,CAACQ,GAAG,CAACC,OAAL,CAAxB,CAAT;AACH,GAboC,CAgBrC;AACA;AACA;AACA;;AACH;AAID,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMhB,SAAS,CAACO,eAAe,CAACU,uBAAjB,EAA0CT,qBAA1C,CAAf;AACH","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\n\nimport ShopActionTypes from './shop.type';\n\nexport function* fetchCollectionsAsync() {\n    try {\n        const collectionRef = firestore.collection(\"NewCollections\");\n        const snapshot = yield collectionRef.get();\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n        //call is a blocking effect creator. This means that the saga will not continue to run to the next yield until the API call finishes. \n        //Once it’s finished, we yield put. put is dispatching a new action with the result from the previous yield. \n\n        yield put(fetchCollectionsSuccess(collectionsMap))\n        //put is a non-blocking effect creator, so it dispatches an action (could be an action that triggers some other saga)\n    }\n    catch (err) {\n        yield put(fetchCollectionsFailure(err.message))\n    }\n\n\n    // collectionRef.get().then((snapshot) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     dispatch(fetchCollectionsSuccess(collectionsMap))\n    // }).catch(err => dispatch(fetchCollectionsFailure(err.message)));\n}\n      \n\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync)\n}"]},"metadata":{},"sourceType":"module"}